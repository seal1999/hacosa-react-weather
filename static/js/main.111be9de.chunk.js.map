{"version":3,"sources":["actions/actionCreators.js","components/Aside.js","components/Header.js","components/Main.js","components/Footer.js","containers/App.js","actions/actionTypes.js","reducers/weatherReducer.js","reducers/navigationReducer.js","reducers/index.js","store/store.js","index.js"],"names":["Aside","showMenu","class","src","alt","connect","state","navigation","HeaderDiv","styled","div","Header","onToggleMenu","onClick","id","data-name","viewBox","width","height","rx","transform","fill","d","font-family","font-size","font-weight","letter-spacing","x","y","type","defaultProps","console","warn","Main","props","text","color","textColor","FooterDiv","Copy","small","Footer","Container","App","this","className","Component","AppWithRedux","dispatch","enhance","initialState","data","isLoading","errorMessage","rootReducer","combineReducers","action","weather","payload","city","list","obj","concat","storeEnhancer","composeWithDevTools","applyMiddleware","promise","ReduxThunk","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.111be9de.chunk.js","sourcesContent":["import axios from \"axios\";\nimport * as types from \"./actionTypes\";\n\nconst API_KEY = \"15e39f24e05f6ea0af88f89dc11e5295\";\nconst ROOT_URL = `https://api.openweathermap.org/data/2.5/forecast?appid=${API_KEY}`;\n\n/*\n    action 객체를 만드는 액션 생성자들을 선언 (action creators)\n    여기서 () => ({}) 은, function() { return { } } 와 동일한 의미\n*/\nexport const toggleMenu = () => ({\n  type: types.TOGGLE_MENU\n})\n\nfunction fetchWeatherStart() {\n  const action = { type: types.FETCH_WEATHER_START };\n  return action;\n}\n\nfunction fetchWeatherSuccess(data) {\n  const action = { type: types.FETCH_WEATHER_SUCCESS, payload: data };\n  return action;\n}\n\nfunction fetchWeatherFail(error) {\n  const action = { type: types.FETCH_WEATHER_FAIL, payload: error };\n  return action;\n}\n\nexport function fetchWeather(city) {\n  const promise = axios({\n    url: `${ROOT_URL}&q=${city}`,\n    method: \"get\"\n  });\n  return function(dispatch) {\n    dispatch(fetchWeatherStart());\n    return promise\n      .then(res => {\n        dispatch(fetchWeatherSuccess(res.data));\n        return res;\n      })\n      .catch(error => {\n        dispatch(fetchWeatherFail(error));\n        return error;\n      });\n  };\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n// import PropTypes from \"prop-types\";\n// import { connect } from 'react-redux';\n\nimport \"./Aside.css\";\n\nconst Aside = ({ showMenu }) => {\n  // showMenu를 store에서 가져오려면\n  // connect하고 mapStateToProps\n  return (\n    <div class={showMenu ? \"side-menu__container-active\" : \"side-menu__container\"}>\n      <nav class={showMenu ? \"slide-menu slide-menu-active\" : \"slide-menu\"}>\n        <section class=\"menu-header\">\n          <span class=\"greeting__text\">Welcome Back</span>\n          <div class=\"profile-image__container\">\n            <img\n              src=\"https://www.jamf.com/jamf-nation/img/default-avatars/generic-user-purple.png\"\n              alt=\"profile\"\n              class=\"profile__image\"\n            />\n          </div>\n          <div class=\"account-details\">\n            <span class=\"name__text\">userEmail</span>\n            <span class=\"email__text\">Free Plan</span>\n          </div>\n        </section>\n        <section class=\"menu-body\">\n          <ul class=\"menu-links\">\n            <li class=\"menu-link\">Home</li>\n            <li class=\"menu-link\"> Add City</li>\n            <li class=\"menu-link\">Logout</li>\n          </ul>\n        </section>\n        <section class=\"menu-footer\">\n          <small class=\"copyright__text\">Copyright © 2020 Teacher.Seal</small>\n        </section>\n      </nav>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  showMenu: state.navigation.showMenu\n});\n\nconnect(mapStateToProps)(Aside);\n\nexport default Aside;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport \"./Header.css\";\n// import { createStore } from \"redux\";\n// import rootReducer from \"../reducers\";\n\n// styled-component sample\nconst HeaderDiv = styled.div`\n  background-color: #fff;\n  width: 100%;\n  display: grid;\n  grid-template-columns: 1fr 1fr 0.25fr;\n  box-shadow: 0 0 2rem rgba(0, 0, 255, 0.1);\n  margin: 0;\n  min-height: 4rem;\n  align-items: center;\n  animation: slidedown 0.5s ease-in-out, fadein 1s ease-in-out;\n`;\n\nconst Header = ({onToggleMenu}) => {\n  return (\n    <HeaderDiv>\n      <div class=\"left__section\">\n        <svg\n          onClick={onToggleMenu}\n          class=\"hamburger__icon\"\n          id=\"Menu_Burger_Icon\"\n          data-name=\"Menu Burger Icon\"\n          viewBox=\"31.5 30 49.9 32\"\n        >\n          <rect\n            id=\"Rectangle_9\"\n            width=\"49.9\"\n            height=\"4\"\n            class=\"hamburger__icon__fill\"\n            data-name=\"Rectangle 9\"\n            rx=\"2\"\n            transform=\"translate(31.5 58)\"\n          ></rect>\n          <rect\n            id=\"Rectangle_10\"\n            width=\"49.9\"\n            height=\"4\"\n            class=\"hamburger__icon__fill\"\n            data-name=\"Rectangle 10\"\n            rx=\"2\"\n            transform=\"translate(31.5 44)\"\n          ></rect>\n          <rect\n            id=\"Rectangle_11\"\n            width=\"49.9\"\n            height=\"4\"\n            class=\"hamburger__icon__fill\"\n            data-name=\"Rectangle 11\"\n            rx=\"2\"\n            transform=\"translate(31.5 30)\"\n          ></rect>\n        </svg>\n        <svg class=\"logo__icon\" viewBox=\"150.3 22.2 213.7 42.8\">\n          <path\n            fill=\"#00ff9b\"\n            d=\"M150.3 65V22.2L193 65z\"\n            data-name=\"Path 1\"\n          ></path>\n          <path\n            fill=\"#003eff\"\n            d=\"M193.1 65h-42.8L193 22.2z\"\n            data-name=\"Path 2\"\n          ></path>\n          <text\n            class=\"logo__text\"\n            fill=\"#432c85\"\n            font-family=\"SegoeUI-Semibold,Segoe UI\"\n            font-size=\"30\"\n            font-weight=\"600\"\n            letter-spacing=\".1em\"\n            transform=\"translate(220 56)\"\n          >\n            <tspan x=\"0\" y=\"0\">\n              Seal1999\n            </tspan>\n          </text>\n        </svg>\n      </div>\n      <h3 class=\"date__text\">Today</h3>\n      <div class=\"mode-toggle__container\">\n        <span class=\"mode-toggle__text\">Light</span>\n        <label class=\"toggle-button__container\">\n          <input type=\"checkbox\" class=\"mode-toggle__input\" />\n          <span class=\"mode-toggle__bg\"></span>\n          <span class=\"mode-toggle__circle\"></span>\n        </label>\n        <span class=\"mode-toggle__text\">Dark</span>\n      </div>\n    </HeaderDiv>\n  );\n};\n\nHeader.propTypes = {\n  onToggleMenu: PropTypes.func\n};\n\nHeader.defaultProps = {\n  onToggleMenu: () => console.warn('onToggleMenu not defined'),\n};\n\nexport default Header;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Main = props => {\n  // do something\n  // const navClass = `nav-extended ${props.color}`;\n  return (\n    <div>\n      <h3>Main</h3>\n    </div>\n  );\n};\n\nMain.defaultProps = {\n  text: \"Header text\",\n  color: \"purple darken-4\",\n  textColor: \"white\",\n};\n\nMain.propTypes = {\n  text: PropTypes.string,\n  color: PropTypes.string,\n  textColor: PropTypes.string,\n};\n\nexport default Main;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\n// styled-component sample\nconst FooterDiv = styled.div`\n  min-height: 100vh;\n  width: 100vw;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Copy = styled.small`\n  display: block;\n  text-align: center;\n`;\n\nconst Footer = props => {\n  // do something\n  // const navClass = `nav-extended ${props.color}`;\n  return (\n    <FooterDiv>\n      <Copy>Copyright © 2020 Teacher.Seal</Copy>\n    </FooterDiv>\n  );\n};\n\nFooter.defaultProps = {\n  text: \"Header text\",\n  color: \"purple darken-4\",\n  textColor: \"white\",\n};\n\nFooter.propTypes = {\n  text: PropTypes.string,\n  color: PropTypes.string,\n  textColor: PropTypes.string,\n};\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nimport * as actions from '../actions/actionCreators';\nimport Aside from \"../components/Aside\";\nimport Header from \"../components/Header\";\nimport Main from \"../components/Main\";\nimport Footer from \"../components/Footer\";\n\nconst Container = styled.div`\n  width: 100%;\n  min-height: 100vh;\n  display: flex;\n  align-items: center;\n  flex-flow: column;\n  transition: background 300ms linear;\n  background-image: linear-gradient(to top, #5ee7df 0%, #66a6ff 100%);\n`;\n\n/*\n  component안에서 method의 실행순서\n  (1) 컴포넌트 생성시: constructor -> componentWillMount -> render -> componentDidMount\n  (2) 컴포넌트 제거시: componentWillUnmount \n  (3) 컴포넌트의 props 변경시: componentWillReceiveProps -> shouldComponentUpdate -> componentWillUpdate-> render -> componentDidUpdate\n  (4) 컴포넌트의 state 변경시: shouldComponentUpdate -> componentWillUpdate-> render -> componentDidUpdate \n*/\nclass App extends Component {\n  componentDidMount() {\n    // 컴포넌트 생성이 끝나고 실행될 초기화 로직, 예: Add된 도시 날씨를 읽어오기 \n    // this.props.fetchWeather(\"San Francisco\");\n  }\n\n  render() {\n    const { showMenu, onToggleMenu } = this.props;\n    return (\n      <div className=\"container\">\n        <Container>\n          {/* 컴포넌트는 Aside, Head, Main, Footer로 구성 */}\n          <Aside showMenu={showMenu} />\n          <Header onToggleMenu={onToggleMenu} />\n          <Main />\n          <Footer />\n        </Container>\n      </div>\n    );\n  }\n}\n\n/*\n  redux에 의해 관리되는 state를 가져와서 props를 통해 컨테이너 컴포넌트에서 사용가능하도록 매핑\n*/\nconst mapStateToProps = (state) => ({\n  showMenu : state.navigation.showMenu\n});\n\n/* \n  action creator를 props에 bind하고, dispatch 함수를 통해 모든 reducer에게 전달\n  이 함수에서 전달된 것들은 UserList 컨테이너의 props로 사용\n*/\nconst mapDispatchToProps = (dispatch) => ({\n  onToggleMenu: () => dispatch(actions.toggleMenu())\n})\n\nconst enhance = connect(mapStateToProps, mapDispatchToProps);\nconst AppWithRedux = enhance(App);\n\nexport { App, AppWithRedux };\n","/*\n    Action 의 종류들을 선언. export 를 앞에 붙임으로서, \n    나중에 import * as types from './ActionTypes' 식으로 사용 가능\n*/\nexport const TOGGLE_MENU = \"TOGGLE_MENU\";\nexport const FETCH_WEATHER = \"FETCH_WEATHER\";\nexport const FETCH_WEATHER_START = \"FETCH_WEATHER_START\";\nexport const FETCH_WEATHER_SUCCESS = \"FETCH_WEATHER_SUCCESS\";\nexport const FETCH_WEATHER_FAIL = \"FETCH_WEATHER_FAIL\";\n","import * as actions from \"../actions/actionTypes\";\n\nexport const initialState = {\n  data: [],\n  isLoading: false,\n  errorMessage: \"\"\n};\n\nexport function weatherReducer(state = initialState, action) {\n  switch (action.type) {\n    case actions.FETCH_WEATHER_SUCCESS:\n      const { city, list } = action.payload;\n      const obj = {\n        city,\n        list\n      };\n      return {\n        ...state,\n        isLoading: false,\n        data: [obj].concat(state.data),\n        errorMessage: \"\"\n      };\n    case actions.FETCH_WEATHER_START:\n      return {\n        ...state,\n        isLoading: true,\n        errorMessage: \"\"\n      };\n    case actions.FETCH_WEATHER_FAIL:\n      return {\n        ...state,\n        isLoading: false,\n        errorMessage: \"Cannot find the city you just typed\"\n      };\n    default:\n      return state;\n  }\n}\n","import * as actions from \"../actions/actionTypes\";\n\n// 리듀서는 액션의 type에 따라 변화를 일으키는 함수\n// 리듀서 파일에는 최초변화를 일으키기전, 지니고있어야 할 초기상태가 정의\nexport const initialState = {\n  showMenu: false\n};\n\n// 리듀서 함수는 state 와 action 을 파라미터로 가지는 함수이며, \n// 그 내부에서 switch 문을 통하여 action.type 에 따라 상태에 다른 변화를 일으키면 됨\n// state 를 직접 수정하면 절대 안되고, 기존 state 값에 덮어쓴 새 상태객체를 만드는 방식으로 해야함 \nexport function navigationReducer(state = initialState, action) {\n  switch (action.type) {\n    case actions.TOGGLE_MENU:\n      return {\n        ...state,\n        showMenu: !state.showMenu\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { weatherReducer } from \"./weatherReducer\";\nimport { navigationReducer } from \"./navigationReducer\";\n\nconst rootReducer = combineReducers({\n  navigation: navigationReducer,\n  weather: weatherReducer\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport promise from \"redux-promise-middleware\";\nimport rootReducer from \"../reducers\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\n/*\n    Store 는 리덕스에서 가장 핵심적인 인스턴스\n    이 안에 현재 상태를 내장하고있고, 구독(subscribe)중인 함수들이 상태가 업데이트 될 때 마다 다시 실행되게 해줌\n    redux 에서 createStore 를 불러온 다음에 해당 함수의 파라미터로 리듀서를 넣음 \n*/\nconst storeEnhancer = composeWithDevTools(applyMiddleware(promise, ReduxThunk));\nconst store = createStore(rootReducer, storeEnhancer);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { AppWithRedux } from \"./containers/App\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <AppWithRedux />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}