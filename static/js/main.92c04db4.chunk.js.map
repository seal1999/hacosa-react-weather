{"version":3,"sources":["actions/actionCreators.js","actions/actionTypes.js","components/Aside.js","components/Header.js","components/Main.js","components/Footer.js","containers/App.js","reducers/weatherReducer.js","reducers/index.js","store/store.js","index.js"],"names":["ROOT_URL","fetchWeather","city","promise","axios","url","method","dispatch","type","then","res","payload","data","catch","error","fetchWeatherFail","Aside","props","defaultProps","text","color","textColor","Header","Main","Footer","Container","styled","div","App","className","Component","AppWithRedux","connect","state","weather","errorMessage","isLoading","bindActionCreators","enhance","initialState","rootReducer","combineReducers","action","list","obj","concat","storeEnhancer","applyMiddleware","ReduxThunk","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"iSAIMA,EAAQ,iEADE,oCAuBT,SAASC,EAAaC,GAC3B,IAAMC,EAAUC,IAAM,CACpBC,IAAI,GAAD,OAAKL,EAAL,cAAmBE,GACtBI,OAAQ,QAEV,OAAO,SAASC,GAEd,OADAA,EApBa,CAAEC,KCXgB,wBDgCxBL,EACJM,MAAK,SAAAC,GAEJ,OADAH,EAlBS,CAAEC,KCfkB,wBDeiBG,QAkBjBD,EAAIE,OAC1BF,KAERG,OAAM,SAAAC,GAEL,OADAP,EAlBR,SAA0BO,GAExB,MADe,CAAEN,KCnBe,qBDmBiBG,QAASG,GAiB3CC,CAAiBD,IACnBA,MErCf,IAAME,EAAQ,SAAAC,GAGZ,OACE,6BACE,uCAKND,EAAME,aAAe,CACnBC,KAAM,cACNC,MAAO,kBACPC,UAAW,SASEL,QCtBTM,EAAS,SAAAL,GAGb,OACE,6BACI,wCAKRK,EAAOJ,aAAe,CACpBC,KAAM,cACNC,MAAO,kBACPC,UAAW,SASEC,QCtBTC,EAAO,SAAAN,GAGX,OACE,6BACE,sCAKNM,EAAKL,aAAe,CAClBC,KAAM,cACNC,MAAO,kBACPC,UAAW,SASEE,QCtBTC,EAAS,SAAAP,GAGb,OACE,6BACE,wCAKNO,EAAON,aAAe,CACpBC,KAAM,cACNC,MAAO,kBACPC,UAAW,SASEG,Q,oLCdf,IAAMC,EAAYC,IAAOC,IAAV,KAcTC,E,oNAaF,OACE,yBAAKC,UAAU,aACb,kBAACJ,EAAD,KAEE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GApBQK,aAqDlB,IACMC,EADUC,aAvBhB,SAAyBC,GAAQ,IAAD,EACYA,EAAMC,QAMhD,MALc,CACZtB,KAH4B,EACtBA,KAGNuB,aAJ4B,EAChBA,aAIZC,UAL4B,EACFA,cAa9B,SAA4B7B,GAE1B,OAAO8B,YAAmB,CAAEpC,gBAAgBM,KAQzB+B,CAAQV,G,uBC7EhBW,EAAe,CAC1B3B,KAAM,GACNwB,WAAW,EACXD,aAAc,ICFhB,IAIeK,EAJKC,YAAgB,CAClCP,QDIK,WAAuD,IAA/BD,EAA8B,uDAAtBM,EAAcG,EAAQ,uCAC3D,OAAQA,EAAOlC,MACb,INRiC,wBMQjC,MACyBkC,EAAO/B,QAAtBT,EADV,EACUA,KAAMyC,EADhB,EACgBA,KACRC,EAAM,CACV1C,OACAyC,QAEF,OAAO,2BACFV,GADL,IAEEG,WAAW,EACXxB,KAAM,CAACgC,GAAKC,OAAOZ,EAAMrB,MACzBuB,aAAc,KAElB,INrB+B,sBMsB7B,OAAO,2BACFF,GADL,IAEEG,WAAW,EACXD,aAAc,KAElB,INzB8B,qBM0B5B,OAAO,2BACFF,GADL,IAEEG,WAAW,EACXD,aAAc,wCAElB,QACE,OAAOF,ME9BPa,EAAgBC,YAAgB5C,IAAS6C,KAGhCC,EAFDC,YAAYV,EAAaM,GCAvCK,IAASC,OACP,kBAAC,IAAD,CAAUH,MAAOA,GACf,kBAAClB,EAAD,OAEFsB,SAASC,eAAe,W","file":"static/js/main.92c04db4.chunk.js","sourcesContent":["import axios from \"axios\";\nimport * as types from \"./actionTypes\";\n\nconst API_KEY = \"15e39f24e05f6ea0af88f89dc11e5295\";\nconst ROOT_URL = `https://api.openweathermap.org/data/2.5/forecast?appid=${API_KEY}`;\n\n/*\n  We don't expose the start/success/fail action creators (but we do expose the\n  start/success/fail action types). We need these action creators to test the\n  fetchWeather action creator, which is asynchronous.\n*/\nfunction fetchWeatherStart() {\n  const action = { type: types.FETCH_WEATHER_START };\n  return action;\n}\n\nfunction fetchWeatherSuccess(data) {\n  const action = { type: types.FETCH_WEATHER_SUCCESS, payload: data };\n  return action;\n}\n\nfunction fetchWeatherFail(error) {\n  const action = { type: types.FETCH_WEATHER_FAIL, payload: error };\n  return action;\n}\n\nexport function fetchWeather(city) {\n  const promise = axios({\n    url: `${ROOT_URL}&q=${city}`,\n    method: \"get\"\n  });\n  return function(dispatch) {\n    dispatch(fetchWeatherStart());\n    return promise\n      .then(res => {\n        dispatch(fetchWeatherSuccess(res.data));\n        return res;\n      })\n      .catch(error => {\n        dispatch(fetchWeatherFail(error));\n        return error;\n      });\n  };\n}\n","export const FETCH_WEATHER = \"FETCH_WEATHER\";\nexport const FETCH_WEATHER_START = \"FETCH_WEATHER_START\";\nexport const FETCH_WEATHER_SUCCESS = \"FETCH_WEATHER_SUCCESS\";\nexport const FETCH_WEATHER_FAIL = \"FETCH_WEATHER_FAIL\";\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Aside = props => {\n  // do something\n  // const navClass = `nav-extended ${props.color}`;\n  return (\n    <div>\n      <h3>Aside</h3>\n    </div>\n  );\n};\n\nAside.defaultProps = {\n  text: \"Header text\",\n  color: \"purple darken-4\",\n  textColor: \"white\",\n};\n\nAside.propTypes = {\n  text: PropTypes.string,\n  color: PropTypes.string,\n  textColor: PropTypes.string,\n};\n\nexport default Aside;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Header = props => {\n  // do something\n  // const navClass = `nav-extended ${props.color}`;\n  return (\n    <div>\n        <h3>Header</h3>\n    </div>\n  );\n};\n\nHeader.defaultProps = {\n  text: \"Header text\",\n  color: \"purple darken-4\",\n  textColor: \"white\"\n};\n\nHeader.propTypes = {\n  text: PropTypes.string,\n  color: PropTypes.string,\n  textColor: PropTypes.string\n};\n\nexport default Header;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Main = props => {\n  // do something\n  // const navClass = `nav-extended ${props.color}`;\n  return (\n    <div>\n      <h3>Main</h3>\n    </div>\n  );\n};\n\nMain.defaultProps = {\n  text: \"Header text\",\n  color: \"purple darken-4\",\n  textColor: \"white\",\n};\n\nMain.propTypes = {\n  text: PropTypes.string,\n  color: PropTypes.string,\n  textColor: PropTypes.string,\n};\n\nexport default Main;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Footer = props => {\n  // do something\n  // const navClass = `nav-extended ${props.color}`;\n  return (\n    <div>\n      <h3>Footer</h3>\n    </div>\n  );\n};\n\nFooter.defaultProps = {\n  text: \"Header text\",\n  color: \"purple darken-4\",\n  textColor: \"white\",\n};\n\nFooter.propTypes = {\n  text: PropTypes.string,\n  color: PropTypes.string,\n  textColor: PropTypes.string,\n};\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\n// import { PropagateLoader } from \"react-spinners\";\nimport { fetchWeather } from \"../actions/actionCreators\";\nimport Aside from \"../components/Aside\";\nimport Header from \"../components/Header\";\nimport Main from \"../components/Main\";\nimport Footer from \"../components/Footer\";\n\nconst Container = styled.div`\n  font-family: \"Montserrat\", sans-serif;\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n`;\n\n/*\n  component안에서 method의 실행순서\n  (1) 컴포넌트 생성시: constructor -> componentWillMount -> render -> componentDidMount\n  (2) 컴포넌트 제거시: componentWillUnmount \n  (3) 컴포넌트의 props 변경시: componentWillReceiveProps -> shouldComponentUpdate -> componentWillUpdate-> render -> componentDidUpdate\n  (4) 컴포넌트의 state 변경시: shouldComponentUpdate -> componentWillUpdate-> render -> componentDidUpdate \n*/\nclass App extends Component {\n  componentDidMount() {\n    // 컴포넌트 생성이 끝나고 실행될 초기화 로직, 예: Add된 도시 날씨를 읽어오기 \n    // this.props.fetchWeather(\"San Francisco\");\n  }\n\n  render() {\n    /*\n      Pass the fetchWeather action creator down to the component hierarchy.\n      We want to call it - namely we want to dispatch a new action to the redux\n      store - when we enter a new city in the search bar.\n    */\n    // const { data, errorMessage, fetchWeather } = this.props;\n    return (\n      <div className=\"container\">\n        <Container>\n          {/* 컴포넌트는 Aside, Head, Main, Footer로 구성 */}\n          <Aside />\n          <Header />\n          <Main />\n          <Footer />\n        </Container>\n      </div>\n    );\n  }\n}\n\n/*\n  redux에 의해 관리되는 state를 가져와서 props를 통해 컨테이너 컴포넌트에서 사용가능하도록 매핑\n*/\nfunction mapStateToProps(state) {\n  const { data, errorMessage, isLoading } = state.weather;\n  const props = {\n    data,\n    errorMessage,\n    isLoading,\n  };\n  return props;\n}\n\n/* \n  action creator를 props에 bind하고, dispatch 함수를 통해 모든 reducer에게 전달\n  이 함수에서 전달된 것들은 UserList 컨테이너의 props로 사용\n*/\nfunction mapDispatchToProps(dispatch) {\n  // object destructuring: {fetchUsers (prop): fetchUsers (action creator)}\n  return bindActionCreators({ fetchWeather }, dispatch);\n}\n\n/*\n  Promote the \"dumb\", redux-unaware, presentational component, to a \"smart\",\n  redux-aware, container component.\n*/\nconst enhance = connect(mapStateToProps, mapDispatchToProps);\nconst AppWithRedux = enhance(App);\n\nexport { App, AppWithRedux };\n","import * as actions from \"../actions/actionTypes\";\n\nexport const initialState = {\n  data: [],\n  isLoading: false,\n  errorMessage: \"\"\n};\n\nexport function weatherReducer(state = initialState, action) {\n  switch (action.type) {\n    case actions.FETCH_WEATHER_SUCCESS:\n      const { city, list } = action.payload;\n      const obj = {\n        city,\n        list\n      };\n      return {\n        ...state,\n        isLoading: false,\n        data: [obj].concat(state.data),\n        errorMessage: \"\"\n      };\n    case actions.FETCH_WEATHER_START:\n      return {\n        ...state,\n        isLoading: true,\n        errorMessage: \"\"\n      };\n    case actions.FETCH_WEATHER_FAIL:\n      return {\n        ...state,\n        isLoading: false,\n        errorMessage: \"Cannot find the city you just typed\"\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { weatherReducer } from \"./weatherReducer\";\n\nconst rootReducer = combineReducers({\n  weather: weatherReducer\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from \"redux\";\nimport ReduxThunk from \"redux-thunk\";\nimport promise from \"redux-promise-middleware\";\nimport rootReducer from \"../reducers\";\n\nconst storeEnhancer = applyMiddleware(promise, ReduxThunk);\nconst store = createStore(rootReducer, storeEnhancer);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { AppWithRedux } from \"./containers/App\";\nimport store from \"./store/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <AppWithRedux />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}